{"ast":null,"code":"/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nvar rtlLangs = new Set(['ae', // Avestan\n'ar', // Arabic\n'arc', // Aramaic\n'bcc', // Southern Balochi\n'bqi', // Bakthiari\n'ckb', // Sorani\n'dv', // Dhivehi\n'fa', 'far', // Persian\n'glk', // Gilaki\n'he', 'iw', // Hebrew\n'khw', // Khowar\n'ks', // Kashmiri\n'ku', // Kurdish\n'mzn', // Mazanderani\n'nqo', // N'Ko\n'pnb', // Western Punjabi\n'ps', // Pashto\n'sd', // Sindhi\n'ug', // Uyghur\n'ur', // Urdu\n'yi' // Yiddish\n]);\nvar cache = new Map();\n/**\r\n * Determine the writing direction of a locale\r\n */\n\nexport function isLocaleRTL(locale) {\n  var cachedRTL = cache.get(locale);\n\n  if (cachedRTL) {\n    return cachedRTL;\n  }\n\n  var isRTL = false; // $FlowFixMe\n\n  if (Intl.Locale) {\n    // $FlowFixMe\n    var script = new Intl.Locale(locale).maximize().script;\n    isRTL = rtlScripts.has(script);\n  } else {\n    // Fallback to inferring from language\n    var lang = locale.split('-')[0];\n    isRTL = rtlLangs.has(lang);\n  }\n\n  cache.set(locale, isRTL);\n  return isRTL;\n}","map":{"version":3,"sources":["C:/Users/FTChu/OneDrive/Documents/GitHub/PaperHands/page/client/node_modules/react-native-web/dist/modules/useLocale/isLocaleRTL.js"],"names":["rtlScripts","Set","rtlLangs","cache","Map","isLocaleRTL","locale","cachedRTL","get","isRTL","Intl","Locale","script","maximize","has","lang","split","set"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,MAAjE,EAAyE,MAAzE,CAAR,CAAjB;AACA,IAAIC,QAAQ,GAAG,IAAID,GAAJ,CAAQ,CAAC,IAAD,EAAO;AAC9B,IADuB,EACjB;AACN,KAFuB,EAEhB;AACP,KAHuB,EAGhB;AACP,KAJuB,EAIhB;AACP,KALuB,EAKhB;AACP,IANuB,EAMjB;AACN,IAPuB,EAOjB,KAPiB,EAOV;AACb,KARuB,EAQhB;AACP,IATuB,EASjB,IATiB,EASX;AACZ,KAVuB,EAUhB;AACP,IAXuB,EAWjB;AACN,IAZuB,EAYjB;AACN,KAbuB,EAahB;AACP,KAduB,EAchB;AACP,KAfuB,EAehB;AACP,IAhBuB,EAgBjB;AACN,IAjBuB,EAiBjB;AACN,IAlBuB,EAkBjB;AACN,IAnBuB,EAmBjB;AACN,IApBuB,CAoBlB;AApBkB,CAAR,CAAf;AAsBA,IAAIE,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClC,MAAIC,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAUF,MAAV,CAAhB;;AAEA,MAAIC,SAAJ,EAAe;AACb,WAAOA,SAAP;AACD;;AAED,MAAIE,KAAK,GAAG,KAAZ,CAPkC,CAOf;;AAEnB,MAAIC,IAAI,CAACC,MAAT,EAAiB;AACf;AACA,QAAIC,MAAM,GAAG,IAAIF,IAAI,CAACC,MAAT,CAAgBL,MAAhB,EAAwBO,QAAxB,GAAmCD,MAAhD;AACAH,IAAAA,KAAK,GAAGT,UAAU,CAACc,GAAX,CAAeF,MAAf,CAAR;AACD,GAJD,MAIO;AACL;AACA,QAAIG,IAAI,GAAGT,MAAM,CAACU,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAX;AACAP,IAAAA,KAAK,GAAGP,QAAQ,CAACY,GAAT,CAAaC,IAAb,CAAR;AACD;;AAEDZ,EAAAA,KAAK,CAACc,GAAN,CAAUX,MAAV,EAAkBG,KAAlB;AACA,SAAOA,KAAP;AACD","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\r\nvar rtlLangs = new Set(['ae', // Avestan\r\n'ar', // Arabic\r\n'arc', // Aramaic\r\n'bcc', // Southern Balochi\r\n'bqi', // Bakthiari\r\n'ckb', // Sorani\r\n'dv', // Dhivehi\r\n'fa', 'far', // Persian\r\n'glk', // Gilaki\r\n'he', 'iw', // Hebrew\r\n'khw', // Khowar\r\n'ks', // Kashmiri\r\n'ku', // Kurdish\r\n'mzn', // Mazanderani\r\n'nqo', // N'Ko\r\n'pnb', // Western Punjabi\r\n'ps', // Pashto\r\n'sd', // Sindhi\r\n'ug', // Uyghur\r\n'ur', // Urdu\r\n'yi' // Yiddish\r\n]);\r\nvar cache = new Map();\r\n/**\r\n * Determine the writing direction of a locale\r\n */\r\n\r\nexport function isLocaleRTL(locale) {\r\n  var cachedRTL = cache.get(locale);\r\n\r\n  if (cachedRTL) {\r\n    return cachedRTL;\r\n  }\r\n\r\n  var isRTL = false; // $FlowFixMe\r\n\r\n  if (Intl.Locale) {\r\n    // $FlowFixMe\r\n    var script = new Intl.Locale(locale).maximize().script;\r\n    isRTL = rtlScripts.has(script);\r\n  } else {\r\n    // Fallback to inferring from language\r\n    var lang = locale.split('-')[0];\r\n    isRTL = rtlLangs.has(lang);\r\n  }\r\n\r\n  cache.set(locale, isRTL);\r\n  return isRTL;\r\n}"]},"metadata":{},"sourceType":"module"}